#clione-sqlの持っている機能を日本語で記入

= Introduction =

clione-sqlの機能一覧です。


= Details =

=テンプレート機能(2WaySQL)=
まず、下記のようなsqlファイルを用意します。

[Sample.sql]
{{{
SELECT
    *
FROM
    TABLE1
WHERE
    FIELD1 = /* param1 */100
    AND FIELD2 = /* param2 */'AAA'
}}}

これを適切なパス(後述)に置き、Javaで下記のように記述します。

{{{
import static tetz42.clione.SQLManager.*;
           :
    public List<Entity> findTable1ByParam1AndParam2(int param1, String param2) {
        return sqlManager().useFile(getClass(), "Sample.sql")
                .findAll( Entity.class, params("param1", 500).$("param2", "BBB") );
    }
}}}

すると、上記Sample.sqlは下記のように変換され、適切にparam1, 2の値がbindされて実行されます。
{{{
SELECT
    *
FROM
    TABLE1
WHERE
    FIELD1 = ?
    AND FIELD2 = ?
}}}

なおSample.sqlのテンプレート内で使用されている「/* param1 */」はANSIで定められたSQL文のコメントであるため、Sample1.sqlはそのまま通常のSQLとして実行することができます。
これにより、clione-sqlではテンプレートとなるSQL文を、Osqleditやオブジェクトブラウザのような高機能なSQLエディタで実行して確認しながら開発＆リファクタリングすることが可能となります。

=インデントベースの動的SQL=