= Introduction =

clione-sqlの機能説明です。


=テンプレート機能(2WaySQL)=
まず、下記のようなsqlファイルを用意します。

[Sample.sql]
{{{
SELECT
    *
FROM
    TABLE1
WHERE
    FIELD1 = /* param1 */100
    AND FIELD2 = /* param2 */'AAA'
}}}

これを適切なパス(後述)に置き、Javaで下記のように記述します。

{{{
import static tetz42.clione.SQLManager.*;
           :
    public List<Entity> findTable1ByParam1AndParam2(int param1, String param2) {
        return sqlManager().useFile(getClass(), "Sample.sql")
                .findAll( Entity.class, params("param1", 500).$("param2", "BBB") );
    }
}}}

すると、上記Sample.sqlは下記のように変換され、適切にparam1, 2の値がbindされて実行されます。
{{{
SELECT
    *
FROM
    TABLE1
WHERE
    FIELD1 = ?
    AND FIELD2 = ?
}}}
<br>
なおSample.sqlのテンプレート内で使用されている「/`*` param1 `*`/」はANSIで定められたSQL文のコメントであるため、Sample1.sqlはそのまま通常のSQLとして実行することができます。<br>
これにより、clione-sqlではテンプレートとなるSQL文を、Osqleditやオブジェクトブラウザのような高機能なSQLエディタで実行して確認しながら開発＆リファクタリングすることが可能となります。<br>
<br>
また、SQLファイルを下記のように「=」の前にパラメタを記述すると、パラメタの値に合わせてSQL文が変化するようになります。
{{{
SELECT
    *
FROM
    TABLE1
WHERE
    FIELD1 /* param */= 100
}}}

paramがnullのときは、下記のように「IS NULL」に変化します。
{{{
SELECT
    *
FROM
    TABLE1
WHERE
    FIELD1 IS NULL
}}}
<br>
paramがListか配列の場合には、下記のようにIN句に変化します。
{{{
SELECT
    *
FROM
    TABLE1
WHERE
    FIELD1 IN (?, ?, ?, ?, ?)
}}}
<br>
上記のように動作するのは、パラメタを「=, IS, IN, <>, !=, IS NOT, NOT IN」等の比較演算子の前においた場合です。<br>
それ以外の「LIKE」等には対応していません。<br>
なお「<>」など否定の比較演算子の前にパラメタを置いた場合には、nullの時には「IS NOT NULL」に、Listか配列の時には「NOT IN」に、それぞれ変化します。

==SQLファイルの配置==
SQLファイルは基本的にクラスパスの通ったディレクトリ以下のどこかに配置します。
配置した場所のパスを、下記のように指定します。
{{{
import static tetz42.clione.SQLManager.*;
           :
        sqlManager().useFile("com/sql/Sample.sql")
                .find ...(省略)
    }
}}}
またSQLファイルをクラスと関連付けて配置したいときのために、SQLManager#useFileメソッドではClassオブジェクトをパラメタに渡せるようになっています。<br>
{{{
import static tetz42.clione.SQLManager.*;
           :
        sqlManager().useFile(SampleDao.class, "Sample.sql")
                .find ...(省略)
    }
}}}
上記の例では、例えばSampleDaoのパッケージが「com.clione.dao」だったとすると、<br>
  * com/clione/dao/sql/SampleDao/Sample.sql
に配置されているとみなされます。つまり、
  * [渡されたClassオブジェクトのパッケージ]/sql/[クラス名]/[指定されたファイル名]
というパスだと解釈されますので、そのパスに適切にSQLファイルを置くようにしてください。


=インデントベースの動的SQL=